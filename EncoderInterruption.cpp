#define ENCODER_INPUT_A 32
#define ENCODER_INPUT_B 33

#include "EncoderInterruption.h"

int encoderChanges = 0;

// Should be checked on the motor specification
const float PULSES_PER_REVOLUTION = 823.1;

/*
  The following function was created based on the waveform generated by the
  encoder when the motor was rotating both clock and counter-clockwise.

  The measured waveforms were:
  
  - When rotating counter-clockwise:
    Encoder B output generates a high-pulse before Encoder A output

      Encoder output A: ___|```|__
      Encoder output B: __|```|__

  - When rotating counter-clockwise:
    Encoder A output generates a high-pulse before Encoder B output

      Encoder output A: __|```|__
      Encoder output B: ___|```|__
*/
void onEncoderInterruption() {

  int encoderAState = digitalRead(ENCODER_INPUT_A);
  int encoderBState = digitalRead(ENCODER_INPUT_B);

  if (encoderAState == HIGH && encoderBState == LOW) {
    encoderChanges--;
  } else if(encoderAState == LOW && encoderBState == HIGH) {
    encoderChanges++;
  }
}

void setupEncoderInterruption() {

  attachInterrupt(digitalPinToInterrupt(ENCODER_INPUT_A), onEncoderInterruption, RISING);
  attachInterrupt(digitalPinToInterrupt(ENCODER_INPUT_B), onEncoderInterruption, RISING);
}

float getRotations() {

  float changesSinceLastCall = encoderChanges;
  encoderChanges = 0;

  float revolutions = changesSinceLastCall / PULSES_PER_REVOLUTION;

  return revolutions;
}
